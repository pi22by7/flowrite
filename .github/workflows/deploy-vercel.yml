name: Deploy to Vercel

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Deploy specific tag (optional, defaults to latest)'
        required: false
        type: string

env:
  FLUTTER_VERSION: '3.32.6'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Create .env file
      run: |
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
        echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
        echo "PRODUCTION_URL=https://flowrite.pi22by7.me" >> .env
        echo "VERCEL_URL=https://flowrite-zeta.vercel.app" >> .env
        # Add other environment variables as needed
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build web app
      run: |
        flutter build web --release --base-href /
        
    - name: Copy Vercel configuration
      run: cp vercel.json build/web/
      
    - name: Verify build output
      run: |
        echo "Contents of build/web:"
        ls -la build/web/
        echo "Checking essential files exist:"
        [ -f "build/web/index.html" ] && echo "✓ index.html exists" || echo "✗ index.html missing"
        [ -f "build/web/main.dart.js" ] && echo "✓ main.dart.js exists" || echo "✗ main.dart.js missing"
        [ -f "build/web/flutter_bootstrap.js" ] && echo "✓ flutter_bootstrap.js exists" || echo "✗ flutter_bootstrap.js missing"
        [ -f "build/web/vercel.json" ] && echo "✓ vercel.json exists" || echo "✗ vercel.json missing"
        echo "Build directory size:"
        du -sh build/web/
        
    - name: Verify Vercel configuration
      run: |
        echo "Vercel deployment setup:"
        echo "Using latest Vercel CLI"
        echo "Working directory: ./build/web"
        echo "Deployment: Production"
        echo "Authentication: Token-based"
        echo "Project linking: Automatic via .vercel/project.json"
      
    - name: Deploy to Vercel
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        npm install -g vercel@latest
        cd build/web
        
        # Create .vercel directory first
        mkdir -p .vercel
        
        # Create proper .vercel/project.json with correct format
        cat > .vercel/project.json << EOF
        {
          "orgId": "${{ secrets.VERCEL_ORG_ID }}",
          "projectId": "${{ secrets.VERCEL_PROJECT_ID }}"
        }
        EOF
        
        echo "Vercel CLI version:"
        vercel --version
        echo "Project configuration:"
        cat .vercel/project.json
        echo "Deploying to Vercel..."
        vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
